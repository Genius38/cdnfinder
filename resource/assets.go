// Code generated by go-bindata.
// sources:
// assets/cnamechain.json
// assets/resourcefinder.js
// DO NOT EDIT!

package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCnamechainJson = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x96\xc1\x72\xe3\x36\x0c\x86\xef\x79\x0a\x8d\x0f\x3d\x6d\xd4\xd9\xc9\x21\xe7\xac\xb7\x6d\x32\xcd\x66\xda\xda\x9d\x9d\x76\x27\x07\x88\x82\x24\x8e\x29\x52\x43\x52\x96\xe5\xa7\x5f\x52\x96\x48\x58\xb6\x9c\x9b\x81\xff\x23\x09\x80\x00\xe5\x1f\x77\x49\xf2\x63\x95\x32\xc1\x51\x5a\x93\xda\x56\x67\x2a\xeb\x2d\x9a\x54\xa2\x5d\x7d\x4a\x56\x5b\xef\xf9\xe2\x3d\xab\xf7\x4f\x27\x38\x42\xf7\x2c\x97\x29\x53\xf5\x02\x08\xc5\xc1\x03\xe3\x4e\xc4\x0a\xc0\x0e\x6a\xe0\x13\xf0\x34\x58\x33\x11\xf3\x12\x97\x81\x5c\x9a\x9b\xab\x2d\xb2\x4a\x2a\xa1\x4a\xee\x32\x1a\x03\x9d\x81\xa5\x11\x59\x6a\x33\x06\xac\xc2\x80\x08\x5e\x3b\x28\x30\x4c\xa8\x36\x2f\xb4\x92\x36\x9c\x56\xc3\x51\xc9\x64\x1d\x84\x78\xb0\x04\xb9\xc3\xb1\x30\x69\xa6\x07\x7a\xf0\x45\xc4\xda\xfb\xdc\x40\xd8\x6b\xfb\xcb\x36\x6a\x47\xae\x24\xa9\xda\x93\xb7\x83\x9a\xa1\x68\x4b\x20\x55\xff\x32\x38\xd6\x5f\xdf\x22\x22\x5a\xac\xc0\xba\xe5\x9d\xd2\xbb\xc0\x39\x6f\xf2\x0c\x36\x79\x3b\xf9\x03\x6e\x7a\x63\xb1\x26\x07\xfe\xe6\x0a\xbe\x06\x13\x13\x1a\x2a\x53\x88\x7e\x02\xd6\xa3\x1d\x81\x5c\x3e\x3e\x06\xf5\xeb\xdb\xe3\xe3\x4c\x52\xba\xbc\x94\x1a\x90\xb6\x42\x4d\x72\x71\xfa\x29\x38\x43\xd7\x97\x8c\x6c\x3d\xd7\x4b\x46\x22\x5f\xd4\x99\x5c\xde\x9e\x17\x7d\xca\xd5\xa8\x3b\x23\x6a\x6c\xe8\x8c\x29\xb6\x8a\x4b\x18\x32\x9f\x03\xd3\xe1\x57\x80\x87\x53\x53\xdd\x20\xbc\xeb\x43\xe8\x81\xe6\x78\xa9\x8b\x83\x9f\x02\x1a\xa7\xcb\x73\xed\xc6\x19\x75\xbc\xe5\x06\x31\x67\x84\xfb\xfb\xdf\xa7\xb7\xed\xcb\xeb\xaf\x0b\x7c\xdd\x0d\x2d\x4f\x2e\xe7\x83\x05\xa7\x09\x11\xa0\xc3\x0c\xad\x83\xe7\x1a\x34\xa5\x73\x09\xf9\x81\x67\xae\xff\x6e\xb5\xa4\x9b\xfb\xf4\xaa\xd0\x01\x5b\x10\x9a\x05\xa1\x70\x46\xec\xed\xdf\x07\x6b\x26\xc6\x4b\x9e\xc9\xa5\x52\xa5\xc0\x61\xdf\x3f\x86\x9f\x93\x72\x12\x4c\x2f\x73\xce\xc0\xba\x01\xbe\xc2\xf4\xaa\xb5\x6d\x76\x6d\xf5\xb8\x6f\x6b\xdc\x74\xb8\x97\xc5\x15\x7a\xaa\xe9\x8c\x13\x69\xae\xda\x4c\xa0\x7b\xbd\xd9\x6e\x8a\x71\xc6\x54\x3c\x43\x2d\x39\x7d\x33\x9e\x47\x57\x64\x3a\x52\xec\x67\x5e\x56\x1d\x97\x79\x9c\x12\x2e\x19\x34\xe4\xa5\x7d\xf1\xb6\x69\x05\x10\xc2\x30\x09\x35\x46\xc2\x58\xd0\xd6\xbf\xbb\x8c\x42\xb2\xfb\x80\x70\x2d\x25\xa1\x21\xd1\xbc\x8c\xae\xc0\xec\x0e\x24\x93\x3f\xb1\xa7\x4f\x9f\x30\x34\x91\x57\x04\x83\xdf\x31\x4b\x28\x52\x28\x65\x1b\xcd\xe3\x43\xfe\x8a\x7b\x14\x0f\x71\x0b\x21\xbb\x3c\x68\xbc\x46\xe1\xca\x61\x89\x4c\xea\x70\x29\x3b\x21\x97\x40\xbf\x8a\xdf\xe0\x40\x8f\x1f\x01\x63\xc4\x4d\x60\x41\x74\x25\x63\xbb\x06\x6c\x45\x06\x79\xe3\x7d\x7f\x39\x5f\x9c\x5d\x49\xcf\xc7\x9c\x83\x54\xfb\xb3\xbb\x72\x4b\xc6\xbe\x1a\x33\xf9\xc6\xb5\x56\x3a\x79\xa9\xa1\x8c\x9d\x53\x0f\xce\x7b\xee\x9d\x37\x41\xd7\x0d\xf7\x35\xe7\x37\x19\xed\x83\xfa\x3c\x45\xf5\x8f\xfb\x7e\x20\xb3\x98\x27\x17\x4f\xb2\xe1\x75\x23\x90\x5c\xe3\x66\x70\x9c\x5d\xa2\xe9\x78\x61\xe9\x7e\x1b\xef\xb8\x20\xdc\xfc\xec\xf1\x0c\xd9\x78\xcf\xec\xcb\x0f\x2a\x03\x15\xfe\xc4\x0c\x16\xfd\x3e\xa4\x19\xb7\xa5\x86\x3d\xb7\x7d\x84\x2c\x24\xee\x77\xdd\xca\x71\xbc\xcf\xbe\x28\xa9\x45\x81\x85\xf2\x5a\x58\x11\x3c\x01\xdc\xab\xb4\x36\xc8\x64\x68\xb6\xef\x6e\xe6\x54\x67\x92\xa7\x63\x4b\x5e\x43\xe8\x3f\xa7\x59\xda\x43\xa5\x42\x8c\xff\x79\x23\x00\x3d\xaf\xcb\xf4\xd2\x7d\x44\x49\xff\x39\xfd\x7f\x32\x57\xef\x77\xef\x77\x3f\x03\x00\x00\xff\xff\x13\xaf\x40\x9a\xf3\x09\x00\x00"

func assetsCnamechainJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsCnamechainJson,
		"assets/cnamechain.json",
	)
}

func assetsCnamechainJson() (*asset, error) {
	bytes, err := assetsCnamechainJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cnamechain.json", size: 2547, mode: os.FileMode(436), modTime: time.Unix(1509806026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcefinderJs = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x56\x5f\x73\xdb\x36\x0c\x7f\xf7\xa7\x40\xfc\x50\x4b\x67\x5b\x4a\x5f\xe3\x65\xb9\xdd\xd6\x5d\xbb\xcb\xda\xbb\xe4\x31\x73\xef\x68\x09\xb6\x99\x48\xa2\x46\x52\x76\xbd\xcc\xdf\x7d\x00\x49\xfd\xb1\xd7\xb8\x7d\x68\x64\x10\x04\x7e\xf8\xe1\x0f\xb1\x13\x1a\x6a\xb1\x41\xb8\x05\x8d\x7f\x37\x52\x63\x34\xd9\xe3\x8a\x45\x93\x38\xc9\x34\x0a\x8b\x51\x3c\x1b\x01\xd8\x19\x88\x3c\xd7\x68\xcc\x62\xc4\xb7\xe8\x4b\x35\x3a\x43\x43\x57\x5f\x8f\x5e\x66\x0e\xc6\x62\x39\xb4\xe5\x25\x93\x78\x31\x72\x0a\x1b\xb4\x1f\x95\xb1\x95\x28\xd9\xe3\xba\xa9\x32\x2b\x55\x15\x19\xab\x63\x78\x25\x27\x69\x0a\xc6\xaa\xa2\xc0\x0a\xd6\x5a\x95\xb0\xb5\xb6\xbe\x49\xd3\x15\x0a\x9d\x9b\x4c\x0b\x9b\x6d\x51\x9b\x24\x53\x65\xfa\x4c\xde\x2b\x51\xa4\x8d\x91\xd5\x66\xfe\x2c\x76\x82\x14\x64\x6d\xe7\x56\xcd\xc9\xcd\xdc\x6e\x71\xbe\x0d\xbe\xe6\x6a\x3d\x17\xf3\x46\x17\x1c\x87\x3e\xb0\x27\x00\x1f\x04\xc1\xa8\x70\x0f\x0f\xb8\xf9\xf0\xad\x8e\x26\x5f\xa3\xbb\x9b\xf5\xbf\x5b\x1b\xdb\x9a\xbe\x4c\x7c\xf7\x17\xb9\x8f\x9e\xbe\xa6\xcb\x69\x3c\x99\xc1\x44\xba\x58\xf8\xba\x46\x4b\x00\x08\xae\x4e\x4a\xc6\x15\x69\x8c\x9f\xde\x2f\x13\xab\x1e\xad\x26\x48\x91\xd3\x3b\x42\xc6\x87\x10\xa1\x0e\x21\x72\x90\xb5\x56\x2b\xb1\x2a\x0e\x90\x0b\x2b\xa0\xd1\x12\xf6\x5b\x49\x5a\x7b\x84\x5c\x55\x96\xee\x10\x30\xb1\xb2\x41\x3d\x53\x95\x51\x05\x26\x85\xda\x38\xaa\x86\xfe\xab\xa6\x28\x9c\xa3\xd1\x71\x34\x4a\xd3\xcf\x8a\xc2\xc1\x1c\xd6\x4a\xc3\x16\x45\x4e\x6c\xb9\x6f\x14\x64\x5e\x56\xb9\xdc\xc9\xbc\x11\x05\xa8\xd5\x33\x66\x96\x2e\x3c\xca\xb2\x2e\xe4\xfa\x00\xaa\xb1\x75\xc3\x92\x3f\x1d\x60\xff\x93\xef\x52\x74\xa0\xd6\x2e\x15\xc9\x47\x6f\x32\x14\x40\xde\x64\xd8\x3a\x19\x64\x33\x88\x62\x8e\x96\x15\x89\xdf\x5e\xeb\xf5\x18\xa4\x2f\x78\x98\xd1\x47\xd1\xe0\x0c\xe4\x22\x08\xb3\xbc\xe2\x84\x84\x98\x4e\x23\xff\xe3\xf1\xcb\xe7\xc4\x38\x6e\x09\x6f\xe7\x85\xd9\x20\x94\x91\xbc\xbd\x5e\xc8\x9f\x82\x34\xa1\x0a\xda\xd8\xed\x42\x4e\xa7\xb1\x27\x9d\xdc\x91\xe5\x70\xfc\x24\x97\x09\xd7\xc5\x22\x14\x02\x81\x38\x3d\x74\xa2\x05\x91\x01\xfe\xdf\x10\x47\x0f\xdc\x27\xa2\x0f\xef\x89\x8e\x96\x64\xe8\xc9\x9d\x2e\x7d\x5a\xfa\x4c\x75\x7a\x0b\xce\x15\x87\x5b\x8a\x17\xd4\x58\x2b\x6d\x87\xfc\xc9\x8a\x98\xef\xd8\x73\xee\xe8\x3f\x33\x83\x95\x30\xc8\x9d\x99\xab\x52\xc8\x6a\x16\x72\xe4\xe8\xf3\x48\x87\x30\xc7\x64\x9c\xa8\x02\x6f\x7f\xcc\x58\xd9\x0a\x39\xfa\xe2\x72\x9f\xf0\x2f\xef\x2b\xe9\x7a\x39\xfe\x21\xed\x7c\xab\xe5\x1c\x02\xe9\x2c\x7b\x8b\x71\x3e\x23\x46\x3d\xd3\x67\xde\x1c\x5f\x49\x5f\x1b\x27\x15\x75\x0e\xed\x44\x39\xbe\x60\x4f\x1a\xe6\x89\xcc\xf9\xd3\x96\x34\x9e\x05\x70\xeb\x00\x5d\x02\xd3\x4f\xa7\x4e\x31\x4d\x73\x2c\xd0\xe2\x45\xf8\x6d\xb2\xd3\xb4\x52\x39\x3e\x1b\x10\x75\x4d\x01\x89\xdc\xf8\x49\x16\x28\x1d\x9d\x26\xe9\x8c\x5c\x9f\xf9\xd8\xd5\xc7\x88\x6b\xe2\x37\x1a\xbf\x49\xa5\xf6\x3c\x4c\xc2\xf4\x25\xa9\x1f\xaa\x89\xd0\x1b\x43\x13\x87\x46\x2b\xc7\x97\xa8\xea\x21\x20\x7b\xc0\x0c\xe5\x8e\xa6\xc0\xa0\xa8\x78\x22\xa3\xe9\xcb\x8a\x86\xe1\x0c\x8c\xfc\x87\xba\xaf\x8d\x79\xd6\x76\xc0\xa0\x21\x87\xc9\x71\x06\xfa\x78\xbb\xe6\xb8\x14\x51\xeb\xd6\x25\x8c\x7c\x0e\x0c\xd1\x2f\x16\xca\x35\x44\x57\x11\x23\x89\x43\xe1\xf0\x37\xe9\xb5\x77\x93\x95\xca\x0f\x8f\x2c\xbb\x83\x73\xd1\x0d\x5c\xc7\x3d\xf3\x43\x1c\x64\x3d\x5e\x00\x89\x07\x19\x1d\xbc\x3e\xfe\x3c\xb8\x8f\x5a\x9d\x18\xde\xbd\x03\x87\x05\x7e\x26\xcb\x01\x8f\x47\xd8\xa7\xbd\xd5\x5e\xb6\x0a\x00\xdf\x39\x0c\xcf\xe2\x9b\xe7\xf4\x88\x35\x15\xe7\xf8\xfa\x92\xd2\xea\x60\xdd\x0b\x1b\x94\x8e\xa3\xcb\xd6\xa6\xb7\xf0\xbe\x2d\xda\x7a\x2b\x2a\xab\x4a\x2a\xc5\x42\xa2\xb9\x02\xa3\xf8\x7d\x31\x88\x9c\x2f\x8b\x95\x9d\xfb\x96\x0d\x39\x06\x49\x35\xbb\x13\xb2\xa0\x87\x09\x9d\x89\x41\x87\xbf\x39\x56\x3d\x3b\x67\x63\x95\xde\xc0\x7b\xb5\x47\xfd\x2b\xb5\x5e\x14\x73\xd3\x8d\x4f\x5d\x8e\xbb\xdb\x5d\xb6\x6b\xa1\x0d\x7e\xaa\x6c\x74\x3e\x85\xe3\x45\xa7\xba\xa2\x7e\x7a\x69\x7f\x1e\x03\x21\x6f\x32\xe2\xa9\x23\x46\xd8\x43\x4b\x8a\x11\x3b\x04\x5a\x0d\xa0\x10\x34\x0e\xe8\x5a\x4d\x35\x83\x5d\x99\xd7\xc4\x03\x5b\x78\xd3\x68\xdf\x0f\x27\x7d\xef\xde\xde\x47\x49\xd1\x59\x7a\xd5\xe5\xa6\x52\xf4\x80\x13\xf3\xf4\xea\xb7\xcd\xf9\x41\x6b\xe2\x73\xd0\x91\xa5\xd9\xcc\x68\x1b\x11\x19\xf2\x62\x70\x6c\xbb\xb8\xc6\x2a\x0a\xad\x3e\xeb\x94\xa9\x28\xad\xb0\x8d\xf1\x2b\x04\x37\xa6\x9f\xfd\x6d\x05\xfb\x53\xb8\x22\xaa\x27\xa6\xc9\x08\xb3\x99\xb4\xeb\xc6\xb0\x2b\x26\xaf\x63\x64\x1c\xe3\x1b\x18\xff\xfe\xcb\xa7\xfb\xf1\x71\x12\xd6\x14\x2c\x88\x06\x7f\xe1\x74\xf0\xc0\x1c\xec\xb0\xd9\xff\x67\xf2\x5e\x89\x9c\x1f\x1a\x2b\xa9\xc9\x26\x30\xa5\xfb\x53\xfa\x5b\x1a\xcc\xda\x5d\x29\x2c\x13\x7d\x47\x78\xc1\xd9\x6c\x76\x8b\x68\x82\x9c\x75\xde\x3a\xfb\xd8\xdb\x48\x06\x6b\x4f\xae\xb2\xa6\x24\xb6\x09\x02\x2d\x58\xa4\xd5\x4d\xee\xd0\x28\xc1\xf3\xd0\xdb\x70\x63\xed\xbe\xbd\x5a\xff\x10\x47\x5e\x39\x5e\x7c\x67\xf7\x3a\x9b\x6d\x41\xb3\x1b\x40\xa1\xe1\x12\xfc\x26\x2d\x0f\x6c\xc6\xf0\x5f\x00\x00\x00\xff\xff\x93\xab\x08\xd6\x60\x0b\x00\x00"

func assetsResourcefinderJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcefinderJs,
		"assets/resourcefinder.js",
	)
}

func assetsResourcefinderJs() (*asset, error) {
	bytes, err := assetsResourcefinderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resourcefinder.js", size: 2912, mode: os.FileMode(436), modTime: time.Unix(1488956466, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cnamechain.json": assetsCnamechainJson,
	"assets/resourcefinder.js": assetsResourcefinderJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"cnamechain.json": &bintree{assetsCnamechainJson, map[string]*bintree{}},
		"resourcefinder.js": &bintree{assetsResourcefinderJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

